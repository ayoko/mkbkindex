#!/usr/bin/env python
# -*- coding: utf-8 -*-

# mkbkindex, a lightweight and command-line based index generator
# for professional use, especially optimized for Japanese book publishing
#
# Distributed by
#   Document System Limitd (http://www.d-sys.co.jp)
#   Atsushi Yokoyama, Firmlogics (http://flogics.com)
#
# Copyright (c) 2015, Document System Limited and Atsushi Yokoyama (Firmlogics)
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# 
# * Neither the name of mkbkindex nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DEBUG = False
max_len = 32

def proc_line(line):
        import re
        import math

        if re.match(r'#', line):
                line = re.sub(r'^#@ *', '', line)
                print line
                return
                
	cols = re.split(r'\t+', line)
	if (len(cols) > 0 and len(cols[0]) > 0):
		key = cols[0]
                if len(cols) > 1:
                        number = cols[len(cols) - 1]
                        number = number.replace(",", ", ")
                else:
                        number = ''

                length = len(key)
                if length < max_len:
                        tab = int(math.ceil((max_len - length) / 8.0))
                        print key + '	' * tab + number
                else:
                        print key + "\t" + number

def main():
	import sys

	for line in sys.stdin:
		proc_line(line.strip())

if __name__ == "__main__":
	main()

# 0 40 5
# 1 39 5
# 7 33 5
# 8 32 4
# 9 31 4
# 15 25 4
# 16 24 3
# 16 3
# 17 23 3
# 1111111
# 
